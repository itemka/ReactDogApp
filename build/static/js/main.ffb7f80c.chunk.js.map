{"version":3,"sources":["components/Circle/Circle.module.css","components/Files/newDog.png","components/Files/dog.mp3","components/Redux/ReducerGame.js","components/Circle/Circle.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","plusClickAction","type","initialState","dogArray","id","checkClick","counterClick","ReducerGame","state","action","map","item","randomNumber","AudioOnClickDog","Audio","dogAudio","Circle","props","check","this","currentTime","play","photoShow","css","show","photo","className","onClick","src","DogPhoto","alt","React","Component","connect","App","getRandomImageIndex","Math","floor","random","render","circles","key","setInterval","randomShow","ConnectedApp","Boolean","window","location","hostname","match","CombineReducer","combineReducers","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,KAAO,qBAAqB,MAAQ,sBAAsB,KAAO,uB,mBCDnFD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,uzBCA3C,IAGaC,EAAkB,iBAAO,CAACC,KAHpB,eAMbC,EAAe,CACjBC,SAAU,CACN,CAACC,GAAI,EAAGC,YAAY,GACpB,CAACD,GAAI,EAAGC,YAAY,GACpB,CAACD,GAAI,EAAGC,YAAY,GACpB,CAACD,GAAI,EAAGC,YAAY,GACpB,CAACD,GAAI,EAAGC,YAAY,GACpB,CAACD,GAAI,EAAGC,YAAY,GACpB,CAACD,GAAI,EAAGC,YAAY,GACpB,CAACD,GAAI,EAAGC,YAAY,GACpB,CAACD,GAAI,EAAGC,YAAY,IAExBC,aAAc,GAwBHC,EArBK,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCAClD,OAAQA,EAAOR,MACX,IAvBW,aAwBP,OAAO,EAAP,GACOO,EADP,CAEIF,aAAcE,EAAMF,aAAe,IAE3C,IA3BY,cA4BR,OAAO,EAAP,GACOE,EADP,CAEIL,SAAUK,EAAML,SAASO,KAAI,SAAAC,GACzB,OAAIA,EAAKP,KAAOK,EAAOG,aAAqB,EAAP,GAAWD,EAAX,CAAiBN,YAAY,IAC7D,KAAWM,EAAX,CAAiBN,YAAY,SAG9C,QACI,OAAO,EAAP,GAAWG,GAEnB,OAAOA,G,QChCLK,EAAkB,IAAIC,M,OAAMC,GAE5BC,E,YACF,WAAYC,GAAQ,qEACVA,I,qEAGFC,GACAA,IACAC,KAAKF,MAAMjB,kBACXa,EAAgBO,YAAc,EAC9BP,EAAgBQ,U,+BAId,IAAD,OACDC,GAAsC,IAA1BH,KAAKF,MAAMZ,WAAX,UAAoCkB,IAAIC,MAAxC,UAAoDD,IAAIE,OACxE,OACI,yBAAKC,UAAWH,IAAIZ,KAAMgB,QAAS,kBAAM,EAAKA,QAAQ,EAAKV,MAAMZ,cAC7D,yBAAKqB,UAAWJ,EAAWM,IAAKC,IAAUC,IAAKX,KAAKF,MAAMb,U,GAjBrD2B,IAAMC,WAuBZC,cAAQ,KAAM,CAACjC,mBAAfiC,CAAiCjB,GCzB1CkB,E,2MAqBFC,oBAAsB,WAClB,OAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,W,EAG3BC,OAAS,WACL,IAAIC,EAAU,EAAKvB,MAAMd,SAASO,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAQ8B,IAAK9B,EAAKP,GAAIA,GAAIO,EAAKP,GACvBC,WAAYM,EAAKN,gBACvE,OACI,yBAAKqB,UAAU,OACX,yBAAKA,UAAW,WACX,EAAKT,MAAMX,cAGhB,6BACKkC,GAEL,4BAAQd,UAAW,UAAnB,W,mFApCS,IAAD,OAChBgB,aAAY,WACR,EAAKzB,MAAM0B,WAAW,EAAKR,yBAC5B,O,mDAJOJ,IAAMC,WAkDTY,EADMX,aANG,SAAAzB,GACpB,MAAO,CACHL,SAAUK,EAAMD,YAAYJ,SAC5BG,aAAcE,EAAMD,YAAYD,gBAGM,CAACN,kBAAiB2C,WFpDtC,SAAA/B,GAAY,MAAK,CAACX,KAHxB,cAG2CW,aAAcA,KEoDxDqB,CAAwDC,GC5CzDW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCTAC,EAAiBC,YAAgB,CACnC5C,YAAaA,IAEX6C,EAAQC,YAAYH,GAE1BI,IAASf,OACL,kBAAC,IAAD,CAAUa,MAAOA,GACb,kBAAC,EAAD,OAEJG,SAASC,eAAe,SD+GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ffb7f80c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Circle_item__E-pue\",\"photo\":\"Circle_photo__2mcY6\",\"show\":\"Circle_show__3HZHR\"};","module.exports = __webpack_public_path__ + \"static/media/newDog.cf76527e.png\";","module.exports = __webpack_public_path__ + \"static/media/dog.75fa68d4.mp3\";","const PLUS_CLICK = 'PLUS_CLICK';\nconst RANDOM_SHOW = 'RANDOM_SHOW';\n\nexport const plusClickAction = () => ({type: PLUS_CLICK});\nexport const randomShow = randomNumber => ({type: RANDOM_SHOW, randomNumber: randomNumber});\n\nconst initialState = {\n    dogArray: [\n        {id: 1, checkClick: false},\n        {id: 2, checkClick: false},\n        {id: 3, checkClick: false},\n        {id: 4, checkClick: false},\n        {id: 5, checkClick: false},\n        {id: 6, checkClick: false},\n        {id: 7, checkClick: false},\n        {id: 8, checkClick: false},\n        {id: 9, checkClick: false}\n    ],\n    counterClick: 0,\n};\n\nconst ReducerGame = (state = initialState, action) => {\n    switch (action.type) {\n        case PLUS_CLICK:\n            return {\n                ...state,\n                counterClick: state.counterClick + 1,\n            };\n        case RANDOM_SHOW:\n            return {\n                ...state,\n                dogArray: state.dogArray.map(item => {\n                    if (item.id === action.randomNumber) return {...item, checkClick: true};\n                    else return {...item, checkClick: false};\n                })\n            };\n        default:\n            return {...state}\n    }\n    return state;\n};\n\nexport default ReducerGame;","import React from 'react';\nimport css from './Circle.module.css';\nimport DogPhoto from './../Files/newDog.png';\nimport {connect} from \"react-redux\";\nimport {plusClickAction} from \"../Redux/ReducerGame\";\nimport dogAudio from './../Files/dog.mp3';\n\nconst AudioOnClickDog = new Audio(dogAudio);\n\nclass Circle extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    onClick(check) {\n        if (check) {\n            this.props.plusClickAction();\n            AudioOnClickDog.currentTime = 0;\n            AudioOnClickDog.play();\n        }\n    };\n\n    render() {\n        let photoShow = this.props.checkClick === true ? `${css.show}` : `${css.photo}`;\n        return (\n            <div className={css.item} onClick={() => this.onClick(this.props.checkClick,)}>\n                <img className={photoShow} src={DogPhoto} alt={this.props.id}/>\n            </div>\n        )\n    }\n}\n\nexport default connect(null, {plusClickAction})(Circle);","import React from 'react';\nimport './App.css';\nimport Circle from \"./components/Circle/Circle\";\nimport {connect} from \"react-redux\";\nimport {plusClickAction, randomShow} from \"./components/Redux/ReducerGame\";\n// import dogAudio from './components/Files/dog.mp3';\n\nclass App extends React.Component {\n    componentDidMount() {\n        setInterval(() => {\n            this.props.randomShow(this.getRandomImageIndex())\n        }, 1000);\n        // this.props.randomShow(this.getRandomImageIndex());\n\n        // Добавить страт после 3 секунд\n        // Добавить при попадании на картинку показывать другую картинку\n        // соличество считать и если меньше чем заданное оличество - проиграл\n        // звук промазал\n        // и тд\n    }\n\n    componentDidUpdate() {\n        // setTimeout(() => {\n        //     this.props.randomShow(this.getRandomImageIndex())\n        // }, 2000);\n        // console.log(this.getRandomImageIndex());\n    }\n\n    getRandomImageIndex = () => {\n        return Math.floor(Math.random() * 9);\n    };\n\n    render = () => {\n        let circles = this.props.dogArray.map(item => <Circle key={item.id} id={item.id}\n                                                              checkClick={item.checkClick}/>);\n        return (\n            <div className=\"App\">\n                <div className={\"counter\"}>\n                    {this.props.counterClick}\n                </div>\n                {/*<audio src={dogAudio} controls={true}></audio>*/}\n                <div>\n                    {circles}\n                </div>\n                <button className={\"button\"}>Start</button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        dogArray: state.ReducerGame.dogArray,\n        counterClick: state.ReducerGame.counterClick\n    }\n};\nconst ConnectedApp = connect(mapStateToProps, {plusClickAction, randomShow})(App);\nexport default ConnectedApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {combineReducers, createStore} from \"redux\";\nimport ReducerGame from \"./components/Redux/ReducerGame\";\nimport {Provider} from \"react-redux\";\n    \nconst CombineReducer = combineReducers({\n    ReducerGame: ReducerGame\n});\nconst store = createStore(CombineReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}